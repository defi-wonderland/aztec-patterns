/* Autogenerated file, do not edit! */
  
use dep::std;
use dep::aztec::context::{ PrivateContext, PublicContext };
use dep::protocol_types::{
  address::AztecAddress,
  abis::function_selector::FunctionSelector,
  constants::RETURN_VALUES_LENGTH,
};

struct AllowedAddressQueueNewCallStruct {
  inner: Field,
}

struct BeneficiaryQueueNewCallStruct {
  inner: Field,
}


// Interface for calling Callback functions from a private context
struct CallbackPrivateContextInterface {
  address: AztecAddress,
}

impl CallbackPrivateContextInterface {
  pub fn at(address: AztecAddress) -> Self {
      Self {
          address,
      }
  }
  
  pub fn resolve(
    self,
    context: &mut PrivateContext
  ) -> [Field; RETURN_VALUES_LENGTH] {
    let mut serialized_args = [0; 0];

    context.call_private_function(self.address, FunctionSelector::from_field(0x2810e1d6), serialized_args)
  }
  

  pub fn queue_new_call(
    self,
    context: &mut PrivateContext,
    allowed_address: AllowedAddressQueueNewCallStruct,
    beneficiary: BeneficiaryQueueNewCallStruct,
    value: Field
  ) -> [Field; RETURN_VALUES_LENGTH] {
    let mut serialized_args = [0; 3];
    serialized_args[0] = allowed_address.inner;
    serialized_args[1] = beneficiary.inner;
    serialized_args[2] = value;

    context.call_private_function(self.address, FunctionSelector::from_field(0xab03ed41), serialized_args)
  }
  
}
  
  


// Interface for calling Callback functions from a public context
struct CallbackPublicContextInterface {
  address: AztecAddress,
}

impl CallbackPublicContextInterface {
  pub fn at(address: AztecAddress) -> Self {
      Self {
          address,
      }
  }
  
}
  
  
